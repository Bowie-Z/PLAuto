import os
import math
import json
import carla
import rospy
import time
from numpy import random
from carla import VehicleLightState as vls
import tf

import ros_compatibility as roscomp
from ros_compatibility.exceptions import *
from ros_compatibility.node import CompatibleNode
from ros_compatibility.qos import QoSProfile, DurabilityPolicy

from carla_msgs.msg import CarlaActorList
from carla_msgs.srv import SpawnObject, DestroyObject
from diagnostic_msgs.msg import KeyValue
from geometry_msgs.msg import Pose,PoseStamped
from common_msgs.msg import VehicleState, PlatoonState, VehicleDynamicState, ChassisState
from plauto_nav_msgs.msg import Map
from nav_msgs.msg import Path

from transforms3d.quaternions import quat2axangle
from transforms3d.euler import euler2quat

# ==============================================================================
# -- CarlaScenarioGeneration() --------------------------------------------------------------------
# ==============================================================================

class CarlaScenarioGeneration(CompatibleNode):
    """
    Handles the spawning of the ego vehicle, its sensors and the platoon vehicle
    """
    def __init__(self):
        super(CarlaScenarioGeneration, self).__init__('carla_scenario_generation')

        # self.objects_definition_file = self.get_param('object_definition_file','')
        # self.spawn_sensors_only = self.get_param('spawn_sensors_only','')
        
        # connect to the carla world
        self.carla_host = self.get_param("carla_host", "127.0.0.1")
        self.carla_port = self.get_param("carla_port", "2000")
        self.zombie_vehicle_num = self.get_param("zombie_vehicle_number",0)
        
        self.carla_client = carla.Client(host=self.carla_host,port=self.carla_port)
        self.carla_client.set_timeout(10.0)
        self.carla_world = self.carla_client.get_world()

        self.spawn_point_ego_vehicle_parm = self.get_param('spawn_point_ego_vehicle','')
        if self.spawn_point_ego_vehicle_parm is not None:
            self.spawn_point_ego_vehicle = self.check_spawn_point_param(self.spawn_point_ego_vehicle_parm)
        else:
            self.logwarn("The spawn point of the ego vehicle is not given")
        # TODO: (lhq) search the point of the ego vehicle through Actor.id

        # initialize the players list
        self.platoon_vehicles = []
        self.players = []
        self.reference_path = Path()
        
        self.platoon_state = PlatoonState()
        self.platoon_state_publisher = self.new_publisher(
            PlatoonState,"/carla/platoon_state",
            QoSProfile(depth=1, durability=DurabilityPolicy.TRANSIENT_LOCAL)
        )
        self.local_static_map_publisher = self.new_publisher(
            Map,"/carla/local_static_map",
            QoSProfile(depth=1, durability=DurabilityPolicy.TRANSIENT_LOCAL)
        )
        self.reference_path_publisher = self.new_publisher(
            Path,"/plauto/navigation/reference_path",
            QoSProfile(depth=1, durability=DurabilityPolicy.TRANSIENT_LOCAL)
        )

        self.spawn_object_service = self.new_client(SpawnObject, "/carla/spawn_object")
        self.destroy_object_service = self.new_client(DestroyObject, "/carla/destroy_object")
    
    def generate_platoon(self,interveh_dist):
        # spawn platoon vehicles
        vehicle_bp = self.carla_world.get_blueprint_library().filter('vehicle.carlamotors.carlacola')
        
        def calculate_spawn_point(spawn_point_ego_vehicle,ev_order,pv_order,interveh_dist):
            # calculate the spawn point of other cars in the platoon
            # param spawn_point_ego_vehicle: Pose()
            # param ev_order: int, order of the ego vehicle in the platoon
            # param pv_order: int, order of the other platoon vehicle in the platoon
            # param interveh_dist: float: distance between vehicles in the platoon
            # return spawn_point_platoon_vehicle: Pose()

            ego_ori = spawn_point_ego_vehicle.orientation
            axangle = quat2axangle([ego_ori.w, ego_ori.x, ego_ori.y, ego_ori.z])
            rpy = axangle[0] * axangle[1]

            spawn_point_platoon_vehicle = Pose()
            spawn_point_platoon_vehicle.position.x = spawn_point_ego_vehicle.position.x + (ev_order - pv_order) * interveh_dist * math.cos(rpy[-1])
            spawn_point_platoon_vehicle.position.y = spawn_point_ego_vehicle.position.y + (ev_order - pv_order) * interveh_dist * math.sin(rpy[-1])
            spawn_point_platoon_vehicle.position.z = 0.3

            spawn_point_platoon_vehicle.orientation = spawn_point_ego_vehicle.orientation
            self.loginfo("[Scenario generation] Spawn point is ({},{})".format(spawn_point_platoon_vehicle.position.x,
                                                                               spawn_point_platoon_vehicle.position.y))
            
            return spawn_point_platoon_vehicle
        
        spawn_point = calculate_spawn_point(self.spawn_point_ego_vehicle,2,1,interveh_dist)

        # spawn through service
        spawn_object_request = roscomp.get_service_request(SpawnObject)
        spawn_object_request.type = "vehicle.carlamotors.carlacola"
        spawn_object_request.id = 'p1v1'
        spawn_object_request.attach_to = 0
        spawn_object_request.random_pose = False
        spawn_object_request.transform = spawn_point
        spawn_object_request.attributes.append(KeyValue(key="role_name",value="leader_vehicle"))
        response = self.call_service(self.spawn_object_service, spawn_object_request, spin_until_response_received=True)
        
        # sleep to wait response
        time.sleep(1)
        
        # add platoon vehicle to actor list
        actor_list = self.carla_world.get_actors()
        actor = actor_list.find(response.id)
        actor.set_autopilot(True)

        if actor is not None:
            self.platoon_vehicles.append(actor)
            self.players.append(actor)
        else:
            self.logwarn("The platoon vehicle is not spawned success.")

        # add vehicle state to platoon state
        vehicle_state = VehicleState()
        self.platoon_state.vehicles.append(vehicle_state)
    
    def generate_zombie_vehicles(self):
        blueprints = self.carla_world.get_blueprint_library().filter('vehicle*')
        spawn_points = self.carla_world.get_map().get_spawn_points()
        random.shuffle(spawn_points)
        
        SpawnActor = carla.command.SpawnActor
        SetAutopilot = carla.command.SetAutopilot
        SetVehicleLightState = carla.command.SetVehicleLightState
        FutureActor = carla.command.FutureActor
        
        batch = []
        vehicles_list = []
    
        # traffic manager 
        traffic_manager = self.carla_client.get_trafficmanager()
        traffic_manager.set_global_distance_to_leading_vehicle(1.0)
        
        for n, transform in enumerate(spawn_points):
            if n >= self.zombie_vehicle_num:
                break
            blueprint = random.choice(blueprints)
            if blueprint.has_attribute('color'):
                color = random.choice(blueprint.get_attribute('color').recommended_values)
                blueprint.set_attribute('color', color)
            if blueprint.has_attribute('driver_id'):
                driver_id = random.choice(blueprint.get_attribute('driver_id').recommended_values)
                blueprint.set_attribute('driver_id', driver_id)
            blueprint.set_attribute('role_name', 'zombie_'+str(n))
        
            # prepare the light state of the cars to spawn
            light_state = vls.NONE
            
            # spawn the cars and set their autopilot and light state all together
            batch.append(SpawnActor(blueprint, transform)
                .then(SetAutopilot(FutureActor, True, traffic_manager.get_port()))
                .then(SetVehicleLightState(FutureActor, light_state)))
            
        for response in self.carla_client.apply_batch_sync(batch, False):
            if response.error:
                self.logerr(response.error)
            else:
                vehicles_list.append(response.actor_id)
        self.loginfo(f"[Scenario Generation] Zombie vehicles number is {len(vehicles_list)}")
                

    def generate_scenario(self):
        self.generate_platoon(20)
        self.generate_zombie_vehicles()

    def run_step(self):
        # update platoon state
        for veh_idx, veh_actor in enumerate(self.platoon_vehicles):
            veh_state=VehicleState()
            veh_state.uid = veh_actor.id
            
            # odometry info
            pos = Pose()
            carla_position = veh_actor.get_transform().location
            carla_rotation = veh_actor.get_transform().rotation
            pos.position.x, pos.position.y, pos.position.z = carla_position.x, -carla_position.y, carla_position.z
            
            quat = euler2quat(math.radians(carla_rotation.roll), math.radians(carla_rotation.pitch), math.radians(carla_rotation.yaw))
            pos.orientation.x,pos.orientation.y,pos.orientation.z, pos.orientation.w = quat

            # dynamics info
            dynamic_info = VehicleDynamicState()
            dynamic_info.lon_speed = veh_actor.get_velocity().x
            dynamic_info.lat_speed = veh_actor.get_velocity().y
            dynamic_info.lon_accel = veh_actor.get_acceleration().x
            dynamic_info.lat_accel = veh_actor.get_acceleration().y
            dynamic_info.yaw_rate = veh_actor.get_angular_velocity().z # deg/s

            # chassis state info
            chassis_state = ChassisState()
            chassis_state.throttle = veh_actor.get_control().throttle
            chassis_state.brake = veh_actor.get_control().brake
            chassis_state.steer = veh_actor.get_control().steer
            chassis_state.gear = veh_actor.get_control().gear
            chassis_state.parking_brake = veh_actor.get_control().hand_brake

            veh_state.odom.pose.pose = pos
            veh_state.dynamics = dynamic_info
            veh_state.chassis = chassis_state

            self.platoon_state.vehicles[veh_idx] = veh_state
            
        # update reference path
        # get leader vehicle's waypoint
        leader_veh = self.platoon_vehicles[0]
        leader_loc = leader_veh.get_transform().location
        leader_rot = leader_veh.get_transform().rotation
        leader_pose = PoseStamped()
        leader_pose.pose.position.x = leader_loc.x
        leader_pose.pose.position.y = -leader_loc.y
        leader_pose.pose.position.z = leader_loc.z
        
        quaternion = tf.transformations.quaternion_from_euler(
                0, 0, -math.radians(leader_rot.yaw))
        leader_pose.pose.orientation.x = quaternion[0]
        leader_pose.pose.orientation.y = quaternion[1]
        leader_pose.pose.orientation.z = quaternion[2]
        leader_pose.pose.orientation.w = quaternion[3]
        
        # get ego vehicle's waypoint
        actor_list = self.carla_world.get_actors()
        ego_veh = [actor for actor in actor_list if actor.attributes.get("role_name") == "ego_vehicle"]
        ego_veh = ego_veh[0]
        ego_loc = ego_veh.get_transform().location
        ego_rot = ego_veh.get_transform().rotation
        ego_pose = PoseStamped()
        ego_pose.pose.position.x = ego_loc.x
        ego_pose.pose.position.y = -ego_loc.y
        ego_pose.pose.position.z = ego_loc.z
        
        quaternion = tf.transformations.quaternion_from_euler(
                0, 0, -math.radians(ego_rot.yaw))
        ego_pose.pose.orientation.x = quaternion[0]
        ego_pose.pose.orientation.y = quaternion[1]
        ego_pose.pose.orientation.z = quaternion[2]
        ego_pose.pose.orientation.w = quaternion[3]

        # set reference path
        self.reference_path.header.frame_id = "/map"
        self.reference_path.header.stamp = rospy.Time.now()
        self.reference_path.poses.append(ego_pose)
        self.reference_path.poses.append(leader_pose)
         
        self.platoon_state_publisher.publish(self.platoon_state)
        self.reference_path_publisher.publish(self.reference_path)
        
        # FIXME: map state
        # local_static_map = Map()
        # self.local_static_publisher.publish(local_static_map)

    def create_spawn_point(self, x, y, z, roll, pitch, yaw):
        spawn_point = Pose()
        spawn_point.position.x = x
        spawn_point.position.y = y
        spawn_point.position.z = z
        quat = euler2quat(math.radians(roll), math.radians(pitch), math.radians(yaw))

        spawn_point.orientation.w = quat[0]
        spawn_point.orientation.x = quat[1]
        spawn_point.orientation.y = quat[2]
        spawn_point.orientation.z = quat[3]
        return spawn_point

    def check_spawn_point_param(self, spawn_point_parameter):
        components = spawn_point_parameter.split(',')
        if len(components) != 6:
            self.logwarn("Invalid spawnpoint '{}'".format(spawn_point_parameter))
            return None
        spawn_point = self.create_spawn_point(
            float(components[0]),
            float(components[1]),
            float(components[2]),
            float(components[3]),
            float(components[4]),
            float(components[5])
        )
        return spawn_point

    def destory(self):
        """
        destroy all the players and sensors
        """
        self.loginfo("Destroying spawned objects...")
        try:
            # # destroy vehicles sensors
            # for actor_id in self.vehicles_sensors:
            #     destroy_object_request = roscomp.get_service_request(DestroyObject)
            #     destroy_object_request.id = actor_id
            #     self.call_service(self.destroy_object_service,
            #                       destroy_object_request, timeout=0.5, spin_until_response_received=True)
            #     self.loginfo("Object {} successfully destroyed.".format(actor_id))
            # self.vehicles_sensors = []

            # # destroy global sensors
            # for actor_id in self.global_sensors:
            #     destroy_object_request = roscomp.get_service_request(DestroyObject)
            #     destroy_object_request.id = actor_id
            #     self.call_service(self.destroy_object_service,
            #                       destroy_object_request, timeout=0.5, spin_until_response_received=True)
            #     self.loginfo("Object {} successfully destroyed.".format(actor_id))
            # self.global_sensors = []

            # destroy player [sensor, vehicle, pedestrian]
            # actor_list = self.carla_world.get_actors()
            # for actor in actor_list:
            #     for type_ids in ["sensor","vehicle","pedestrian"]:
            #         if actor.type_id in type_ids:
            #             destroy_object_request = roscomp.get_service_request(DestroyObject)
            #             destroy_object_request.id = actor.id
            #             self.call_service(self.destroy_object_service,
            #                       destroy_object_request, timeout=0.5, spin_until_response_received=True)
            #             self.loginfo("Object {} successfully destroyed.".format(actor.id))
            for player_id in self.players:
                destroy_object_request = roscomp.get_service_request(DestroyObject)
                destroy_object_request.id = player_id
                self.call_service(self.destroy_object_service,
                                  destroy_object_request, timeout=0.5, spin_until_response_received=True)
                self.loginfo("Object {} successfully destroyed.".format(player_id))
            self.players = []
            
            
        except ServiceException:
            self.logwarn(
                'Could not call destroy service on objects, the ros bridge is probably already shutdown')



# ==============================================================================
# -- main() --------------------------------------------------------------------
# ==============================================================================


def main(args=None):
    """
    main function
    """
    roscomp.init("senario_generation", args=args)
    scenario_generation_node = None
    try:
        scenario_generation_node = CarlaScenarioGeneration()
        executor = roscomp.executors.MultiThreadedExecutor()
        executor.add_node(scenario_generation_node)

        roscomp.on_shutdown(scenario_generation_node.destroy)
    except KeyboardInterrupt:
        roscomp.logerr("Could not initialize CarlaScenarioGeneration. Shutting down.")

    if scenario_generation_node:
        try:
            scenario_generation_node.generate_scenario()
            new_timer = scenario_generation_node.new_timer(
                0.05,lambda timer_event=None: scenario_generation_node.run_step())
            
            try:
                scenario_generation_node.spin()
            except (ROSInterruptException, ServiceException, KeyboardInterrupt):
                pass
        except (ROSInterruptException, ServiceException, KeyboardInterrupt):
            scenario_generation_node.logwarn(
                "Spawning process has been interrupted. There might be actors that have not been destroyed properly")
        except RuntimeError as e:
            roscomp.logfatal("Exception caught: {}".format(e))
        finally:
            actor_list = scenario_generation_node.carla_world.get_actors()
            for actor in actor_list:
                actor.destroy()
            roscomp.shutdown()
            del scenario_generation_node.carla_world
            del scenario_generation_node.carla_client


if __name__ == '__main__':
    main()