#!/usr/bin/env python

import datetime
import rospy
from plauto_common.params import parse_private_args
from plauto_cognition_msgs.msg import MapState

# from lane_decision_models.lon_pedes import FSM
# from lane_decision_models.lat_pedes import KeepLaneUtility
# from lane_decision_models.local_trajectory import PolylineTrajectory
from lane_decision_models import MainDecision

# from zzz_planning_msgs.msg import DecisionTrajectory

from nav_msgs.msg import Path 


class DecisionNode(object):
    def __init__(self):

        params = parse_private_args(
            decision_trajectory_topic="decision_trajectory",
            dynamic_map_topic="/plauto/cognition/local_dynamic_map/map_with_ref",
            static_map_topic="/plauto/navigation/local_static_map",
            RVIZ_decision_trajectory_topic="decision_trajectory_path", 
            hz = 4,
        )
        # model_lon = FSM()                           # longitudinal model: FSM
        # model_lat = KeepLaneUtility(model_lon)      # lateral model: Keep Lane
        # model_local = PolylineTrajectory()          

        self._decision_instance = MainDecision(lon_decision=model_lon, lat_decision=model_lat, local_trajectory=model_local)
        self._rate = rospy.Rate(params.hz)

        self._dynamic_map_subscriber = rospy.Subscriber(params.dynamic_map_topic, MapState, self._decision_instance.receive_dynamic_map)
        # self._decision_trajectory_publisher = rospy.Publisher(params.decision_trajectory_topic, DecisionTrajectory, queue_size=1)
        self._rviz_decision_trajectory_publisher = rospy.Publisher(params.RVIZ_decision_trajectory_topic, Path, queue_size=1)

    def loop(self):
        while not rospy.is_shutdown():
            
            #zwt for running 
            try:
                publish_msg = self._decision_instance.update()
            except:
                pass
            if publish_msg:
                self._decision_trajectory_publisher.publish(publish_msg)
                publish_msg2 = publish_msg.trajectory
                self._rviz_decision_trajectory_publisher.publish(publish_msg2)
                rospy.logdebug("PUBLISH: trajectory length = %d, desired_speed = %f", 
                    len(publish_msg.trajectory.poses), publish_msg.desired_speed)
            self._rate.sleep()
    
        
if __name__ == "__main__":

    rospy.init_node("decision_node", log_level=rospy.DEBUG)
    node = DecisionNode()
    node.loop()
