// Generated by gencpp from file common_msgs/V2V.msg
// DO NOT EDIT!


#ifndef COMMON_MSGS_MESSAGE_V2V_H
#define COMMON_MSGS_MESSAGE_V2V_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <nav_msgs/Odometry.h>

namespace common_msgs
{
template <class ContainerAllocator>
struct V2V_
{
  typedef V2V_<ContainerAllocator> Type;

  V2V_()
    : header()
    , odom()
    , leader_speed(0.0)
    , leader_acc(0.0)
    , leader_acc_pedal(0.0)
    , leader_brake_pedal(0.0)
    , leader_frontwheel_angle(0.0)  {
    }
  V2V_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , odom(_alloc)
    , leader_speed(0.0)
    , leader_acc(0.0)
    , leader_acc_pedal(0.0)
    , leader_brake_pedal(0.0)
    , leader_frontwheel_angle(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::nav_msgs::Odometry_<ContainerAllocator>  _odom_type;
  _odom_type odom;

   typedef double _leader_speed_type;
  _leader_speed_type leader_speed;

   typedef double _leader_acc_type;
  _leader_acc_type leader_acc;

   typedef double _leader_acc_pedal_type;
  _leader_acc_pedal_type leader_acc_pedal;

   typedef double _leader_brake_pedal_type;
  _leader_brake_pedal_type leader_brake_pedal;

   typedef double _leader_frontwheel_angle_type;
  _leader_frontwheel_angle_type leader_frontwheel_angle;





  typedef boost::shared_ptr< ::common_msgs::V2V_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::common_msgs::V2V_<ContainerAllocator> const> ConstPtr;

}; // struct V2V_

typedef ::common_msgs::V2V_<std::allocator<void> > V2V;

typedef boost::shared_ptr< ::common_msgs::V2V > V2VPtr;
typedef boost::shared_ptr< ::common_msgs::V2V const> V2VConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::common_msgs::V2V_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::common_msgs::V2V_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::common_msgs::V2V_<ContainerAllocator1> & lhs, const ::common_msgs::V2V_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.odom == rhs.odom &&
    lhs.leader_speed == rhs.leader_speed &&
    lhs.leader_acc == rhs.leader_acc &&
    lhs.leader_acc_pedal == rhs.leader_acc_pedal &&
    lhs.leader_brake_pedal == rhs.leader_brake_pedal &&
    lhs.leader_frontwheel_angle == rhs.leader_frontwheel_angle;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::common_msgs::V2V_<ContainerAllocator1> & lhs, const ::common_msgs::V2V_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace common_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::common_msgs::V2V_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::common_msgs::V2V_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::common_msgs::V2V_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::common_msgs::V2V_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common_msgs::V2V_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common_msgs::V2V_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::common_msgs::V2V_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5d3f3ce1d5d07abc8f4695c3e316dc23";
  }

  static const char* value(const ::common_msgs::V2V_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5d3f3ce1d5d07abcULL;
  static const uint64_t static_value2 = 0x8f4695c3e316dc23ULL;
};

template<class ContainerAllocator>
struct DataType< ::common_msgs::V2V_<ContainerAllocator> >
{
  static const char* value()
  {
    return "common_msgs/V2V";
  }

  static const char* value(const ::common_msgs::V2V_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::common_msgs::V2V_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"#gpsinfo\n"
"nav_msgs/Odometry odom\n"
"#leader info\n"
"float64 leader_speed\n"
"float64 leader_acc\n"
"float64 leader_acc_pedal\n"
"float64 leader_brake_pedal\n"
"float64 leader_frontwheel_angle\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: nav_msgs/Odometry\n"
"# This represents an estimate of a position and velocity in free space.  \n"
"# The pose in this message should be specified in the coordinate frame given by header.frame_id.\n"
"# The twist in this message should be specified in the coordinate frame given by the child_frame_id\n"
"Header header\n"
"string child_frame_id\n"
"geometry_msgs/PoseWithCovariance pose\n"
"geometry_msgs/TwistWithCovariance twist\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseWithCovariance\n"
"# This represents a pose in free space with uncertainty.\n"
"\n"
"Pose pose\n"
"\n"
"# Row-major representation of the 6x6 covariance matrix\n"
"# The orientation parameters use a fixed-axis representation.\n"
"# In order, the parameters are:\n"
"# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n"
"float64[36] covariance\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/TwistWithCovariance\n"
"# This expresses velocity in free space with uncertainty.\n"
"\n"
"Twist twist\n"
"\n"
"# Row-major representation of the 6x6 covariance matrix\n"
"# The orientation parameters use a fixed-axis representation.\n"
"# In order, the parameters are:\n"
"# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n"
"float64[36] covariance\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::common_msgs::V2V_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::common_msgs::V2V_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.odom);
      stream.next(m.leader_speed);
      stream.next(m.leader_acc);
      stream.next(m.leader_acc_pedal);
      stream.next(m.leader_brake_pedal);
      stream.next(m.leader_frontwheel_angle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct V2V_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::common_msgs::V2V_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::common_msgs::V2V_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "odom: ";
    s << std::endl;
    Printer< ::nav_msgs::Odometry_<ContainerAllocator> >::stream(s, indent + "  ", v.odom);
    s << indent << "leader_speed: ";
    Printer<double>::stream(s, indent + "  ", v.leader_speed);
    s << indent << "leader_acc: ";
    Printer<double>::stream(s, indent + "  ", v.leader_acc);
    s << indent << "leader_acc_pedal: ";
    Printer<double>::stream(s, indent + "  ", v.leader_acc_pedal);
    s << indent << "leader_brake_pedal: ";
    Printer<double>::stream(s, indent + "  ", v.leader_brake_pedal);
    s << indent << "leader_frontwheel_angle: ";
    Printer<double>::stream(s, indent + "  ", v.leader_frontwheel_angle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COMMON_MSGS_MESSAGE_V2V_H
