// Generated by gencpp from file common_msgs/ControlCommand.msg
// DO NOT EDIT!


#ifndef COMMON_MSGS_MESSAGE_CONTROLCOMMAND_H
#define COMMON_MSGS_MESSAGE_CONTROLCOMMAND_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace common_msgs
{
template <class ContainerAllocator>
struct ControlCommand_
{
  typedef ControlCommand_<ContainerAllocator> Type;

  ControlCommand_()
    : header()
    , accel(0.0)
    , steer(0.0)
    , gear(0)
    , parking_brake(false)  {
    }
  ControlCommand_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , accel(0.0)
    , steer(0.0)
    , gear(0)
    , parking_brake(false)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _accel_type;
  _accel_type accel;

   typedef float _steer_type;
  _steer_type steer;

   typedef int8_t _gear_type;
  _gear_type gear;

   typedef uint8_t _parking_brake_type;
  _parking_brake_type parking_brake;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(GEAR_NONE)
  #undef GEAR_NONE
#endif
#if defined(_WIN32) && defined(GEAR_NEUTRAL)
  #undef GEAR_NEUTRAL
#endif
#if defined(_WIN32) && defined(GEAR_REVERSE)
  #undef GEAR_REVERSE
#endif
#if defined(_WIN32) && defined(GEAR_PARKING)
  #undef GEAR_PARKING
#endif
#if defined(_WIN32) && defined(GEAR_DRIVE)
  #undef GEAR_DRIVE
#endif

  enum {
    GEAR_NONE = 0,
    GEAR_NEUTRAL = -1,
    GEAR_REVERSE = -2,
    GEAR_PARKING = -3,
    GEAR_DRIVE = -4,
  };


  typedef boost::shared_ptr< ::common_msgs::ControlCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::common_msgs::ControlCommand_<ContainerAllocator> const> ConstPtr;

}; // struct ControlCommand_

typedef ::common_msgs::ControlCommand_<std::allocator<void> > ControlCommand;

typedef boost::shared_ptr< ::common_msgs::ControlCommand > ControlCommandPtr;
typedef boost::shared_ptr< ::common_msgs::ControlCommand const> ControlCommandConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::common_msgs::ControlCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::common_msgs::ControlCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::common_msgs::ControlCommand_<ContainerAllocator1> & lhs, const ::common_msgs::ControlCommand_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.accel == rhs.accel &&
    lhs.steer == rhs.steer &&
    lhs.gear == rhs.gear &&
    lhs.parking_brake == rhs.parking_brake;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::common_msgs::ControlCommand_<ContainerAllocator1> & lhs, const ::common_msgs::ControlCommand_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace common_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::common_msgs::ControlCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::common_msgs::ControlCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::common_msgs::ControlCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::common_msgs::ControlCommand_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common_msgs::ControlCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common_msgs::ControlCommand_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::common_msgs::ControlCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9e9243dea74c7ce1ca4f84c368334f51";
  }

  static const char* value(const ::common_msgs::ControlCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9e9243dea74c7ce1ULL;
  static const uint64_t static_value2 = 0xca4f84c368334f51ULL;
};

template<class ContainerAllocator>
struct DataType< ::common_msgs::ControlCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "common_msgs/ControlCommand";
  }

  static const char* value(const ::common_msgs::ControlCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::common_msgs::ControlCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Adapted from CLAP (https://github.com/CLAP-Framework/clap)\n"
"Header header\n"
"\n"
"# Level of accelaration, unit in m/s^2, throttle is positive, braking is negative\n"
"float32 accel\n"
"\n"
"# Level of steering on front wheel, unit in radian, left turning is positive\n"
"float32 steer\n"
"\n"
"# Gear shift, positive means manual transmission, negative means automatic transmission\n"
"int8 gear\n"
"int8 GEAR_NONE = 0\n"
"int8 GEAR_NEUTRAL = -1\n"
"int8 GEAR_REVERSE = -2\n"
"int8 GEAR_PARKING = -3\n"
"int8 GEAR_DRIVE = -4\n"
"\n"
"# Parking brake switch\n"
"bool parking_brake\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::common_msgs::ControlCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::common_msgs::ControlCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.accel);
      stream.next(m.steer);
      stream.next(m.gear);
      stream.next(m.parking_brake);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ControlCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::common_msgs::ControlCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::common_msgs::ControlCommand_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "accel: ";
    Printer<float>::stream(s, indent + "  ", v.accel);
    s << indent << "steer: ";
    Printer<float>::stream(s, indent + "  ", v.steer);
    s << indent << "gear: ";
    Printer<int8_t>::stream(s, indent + "  ", v.gear);
    s << indent << "parking_brake: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.parking_brake);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COMMON_MSGS_MESSAGE_CONTROLCOMMAND_H
